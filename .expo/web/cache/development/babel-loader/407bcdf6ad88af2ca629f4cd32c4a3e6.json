{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Volumes/Extreme SSD/La\\u0300m vie\\u0323\\u0302c/Mobile App/tuyensinhedu - ios/Screen/Tracuuketquatuyensinh/Input.js\";\n\nimport React, { useState } from \"react\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport { IconButton, Colors } from \"react-native-paper\";\n\nvar MaxLength = function MaxLength(value, lenght) {\n  var TextLength = value.length.toString();\n\n  if (TextLength == lenght) {\n    Alert.alert(\"\\u0110\\u1ED9 d\\xE0i quy \\u0111\\u1ECBnh c\\u1EE7a m\\xE3 l\\xE0 \" + lenght + \" k\\xFD t\\u1EF1\");\n  }\n};\n\nvar Inputs = function Inputs(props) {\n  var _useState = useState(true),\n      _useState2 = _slicedToArray(_useState, 2),\n      secureTextEntry = _useState2[0],\n      setSecureTextEntry = _useState2[1];\n\n  var view;\n  props.checkboxValue.map(function (checkbox, i) {\n    if (checkbox.checked) {\n      switch (i) {\n        case 0:\n          return view = React.createElement(View, {\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 22,\n              columnNumber: 13\n            }\n          }, React.createElement(TextInput, {\n            style: styles.input,\n            placeholder: \"Nh\\u1EADp m\\xE3 h\\u1ED3 s\\u01A1\",\n            keyboardType: \"default\",\n            value: checkbox.value1,\n            multiline: false,\n            onChangeText: function onChangeText(value) {\n              MaxLength(value, 25);\n              props.updateValue(value, 1);\n            },\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 23,\n              columnNumber: 15\n            }\n          }));\n\n        case 1:\n          return view = React.createElement(View, {\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 38,\n              columnNumber: 13\n            }\n          }, React.createElement(TextInput, {\n            style: styles.input,\n            placeholder: \"Nh\\u1EADp m\\xE3 h\\u1ECDc sinh\",\n            keyboardType: \"default\",\n            value: checkbox.value1,\n            multiline: false,\n            onChangeText: function onChangeText(value) {\n              MaxLength(value, 50);\n              props.updateValue(value, 1);\n            },\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 39,\n              columnNumber: 15\n            }\n          }), React.createElement(View, {\n            style: {\n              borderRadius: 10,\n              borderColor: \"#008577\",\n              borderWidth: 1,\n              height: 40,\n              marginTop: \"2%\",\n              flexDirection: \"row\"\n            },\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 50,\n              columnNumber: 15\n            }\n          }, React.createElement(TextInput, {\n            style: {\n              paddingLeft: 20,\n              fontSize: 20,\n              flexGrow: 1,\n              alignSelf: \"center\"\n            },\n            secureTextEntry: secureTextEntry,\n            value: checkbox.value2,\n            placeholder: \"Nh\\u1EADp m\\u1EADt kh\\u1EA9u\",\n            keyboardType: \"default\",\n            multiline: false,\n            onChangeText: function onChangeText(value) {\n              return props.updateValue(value, 2);\n            },\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 60,\n              columnNumber: 17\n            }\n          }), React.createElement(IconButton, {\n            icon: \"eye\",\n            color: Colors.red500,\n            size: 18,\n            onPress: function onPress() {\n              return setSecureTextEntry(!secureTextEntry);\n            },\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 74,\n              columnNumber: 17\n            }\n          })));\n\n        case 2:\n          return view = React.createElement(View, {\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 85,\n              columnNumber: 13\n            }\n          }, React.createElement(TextInput, {\n            style: styles.input,\n            placeholder: \"Nh\\u1EADp s\\u1ED1 b\\xE1o danh\",\n            keyboardType: \"default\",\n            value: checkbox.value1,\n            multiline: false,\n            onChangeText: function onChangeText(value) {\n              MaxLength(value, 25);\n              props.updateValue(value, 1);\n            },\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 86,\n              columnNumber: 15\n            }\n          }));\n      }\n    }\n  });\n  return view || null;\n};\n\nvar styles = StyleSheet.create({\n  input: {\n    borderRadius: 10,\n    borderColor: \"#008577\",\n    borderWidth: 0.8,\n    height: 40,\n    marginTop: \"2%\",\n    paddingLeft: 20,\n    fontSize: 20\n  }\n});\nexport default Inputs;","map":{"version":3,"sources":["/Volumes/Extreme SSD/Làm việc/Mobile App/tuyensinhedu - ios/Screen/Tracuuketquatuyensinh/Input.js"],"names":["React","useState","IconButton","Colors","MaxLength","value","lenght","TextLength","length","toString","Alert","alert","Inputs","props","secureTextEntry","setSecureTextEntry","view","checkboxValue","map","checkbox","i","checked","styles","input","value1","updateValue","borderRadius","borderColor","borderWidth","height","marginTop","flexDirection","paddingLeft","fontSize","flexGrow","alignSelf","value2","red500","StyleSheet","create"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\nimport { Text, View, TextInput, StyleSheet, Alert } from \"react-native\";\r\nimport { IconButton, Colors } from \"react-native-paper\";\r\n\r\n//* Giới hạn độ dài input\r\nconst MaxLength = (value, lenght) => {\r\n  var TextLength = value.length.toString();\r\n  if (TextLength == lenght) {\r\n    Alert.alert(`Độ dài quy định của mã là ${lenght} ký tự`);\r\n  }\r\n};\r\nconst Inputs = (props) => {\r\n  const [secureTextEntry, setSecureTextEntry] = useState(true);\r\n  let view;\r\n  props.checkboxValue.map((checkbox, i) => {\r\n    //* Kiểm tra ô nào check\r\n    if (checkbox.checked) {\r\n      //* Gọi view riêng cho mỗi loại\r\n      switch (i) {\r\n        case 0:\r\n          return (view = (\r\n            <View>\r\n              <TextInput\r\n                style={styles.input}\r\n                placeholder=\"Nhập mã hồ sơ\"\r\n                keyboardType=\"default\"\r\n                value={checkbox.value1}\r\n                multiline={false}\r\n                onChangeText={(value) => {\r\n                  MaxLength(value, 25);\r\n                  props.updateValue(value, 1);\r\n                }}\r\n              />\r\n            </View>\r\n          ));\r\n        case 1:\r\n          return (view = (\r\n            <View>\r\n              <TextInput\r\n                style={styles.input}\r\n                placeholder=\"Nhập mã học sinh\"\r\n                keyboardType=\"default\"\r\n                value={checkbox.value1}\r\n                multiline={false}\r\n                onChangeText={(value) => {\r\n                  MaxLength(value, 50);\r\n                  props.updateValue(value, 1);\r\n                }}\r\n              />\r\n              <View\r\n                style={{\r\n                  borderRadius: 10,\r\n                  borderColor: \"#008577\",\r\n                  borderWidth: 1,\r\n                  height: 40,\r\n                  marginTop: \"2%\",\r\n                  flexDirection: \"row\",\r\n                }}\r\n              >\r\n                <TextInput\r\n                  style={{\r\n                    paddingLeft: 20,\r\n                    fontSize: 20,\r\n                    flexGrow: 1,\r\n                    alignSelf: \"center\",\r\n                  }}\r\n                  secureTextEntry={secureTextEntry}\r\n                  value={checkbox.value2}\r\n                  placeholder=\"Nhập mật khẩu\"\r\n                  keyboardType=\"default\"\r\n                  multiline={false}\r\n                  onChangeText={(value) => props.updateValue(value, 2)}\r\n                />\r\n                <IconButton\r\n                  icon=\"eye\"\r\n                  color={Colors.red500}\r\n                  size={18}\r\n                  onPress={() => setSecureTextEntry(!secureTextEntry)}\r\n                />\r\n              </View>\r\n            </View>\r\n          ));\r\n        case 2:\r\n          return (view = (\r\n            <View>\r\n              <TextInput\r\n                style={styles.input}\r\n                placeholder=\"Nhập số báo danh\"\r\n                keyboardType=\"default\"\r\n                value={checkbox.value1}\r\n                multiline={false}\r\n                onChangeText={(value) => {\r\n                  MaxLength(value, 25);\r\n                  props.updateValue(value, 1);\r\n                }}\r\n              />\r\n            </View>\r\n          ));\r\n      }\r\n    }\r\n  });\r\n  //! Nếu không có true thì trả ra null\r\n  return view || null;\r\n};\r\nconst styles = StyleSheet.create({\r\n  input: {\r\n    borderRadius: 10,\r\n    borderColor: \"#008577\",\r\n    borderWidth: 0.8,\r\n    height: 40,\r\n    marginTop: \"2%\",\r\n    paddingLeft: 20,\r\n    fontSize: 20,\r\n  },\r\n});\r\n\r\nexport default Inputs;\r\n"]},"metadata":{},"sourceType":"module"}